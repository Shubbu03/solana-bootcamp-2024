/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { VESTING_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_EMPLOYEE_DISCRIMINATOR = new Uint8Array([
  87, 175, 18, 124, 24, 81, 207, 40,
]);

export function getCreateEmployeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_EMPLOYEE_DISCRIMINATOR
  );
}

export type CreateEmployeeInstruction<
  TProgram extends string = typeof VESTING_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountBeneficiary extends string | AccountMeta<string> = string,
  TAccountVesting extends string | AccountMeta<string> = string,
  TAccountEmployee extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountBeneficiary extends string
        ? ReadonlyAccount<TAccountBeneficiary>
        : TAccountBeneficiary,
      TAccountVesting extends string
        ? ReadonlyAccount<TAccountVesting>
        : TAccountVesting,
      TAccountEmployee extends string
        ? WritableAccount<TAccountEmployee>
        : TAccountEmployee,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateEmployeeInstructionData = {
  discriminator: ReadonlyUint8Array;
  startTime: bigint;
  endTime: bigint;
  cliffTime: bigint;
  totalAmount: bigint;
};

export type CreateEmployeeInstructionDataArgs = {
  startTime: number | bigint;
  endTime: number | bigint;
  cliffTime: number | bigint;
  totalAmount: number | bigint;
};

export function getCreateEmployeeInstructionDataEncoder(): FixedSizeEncoder<CreateEmployeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['startTime', getI64Encoder()],
      ['endTime', getI64Encoder()],
      ['cliffTime', getI64Encoder()],
      ['totalAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_EMPLOYEE_DISCRIMINATOR })
  );
}

export function getCreateEmployeeInstructionDataDecoder(): FixedSizeDecoder<CreateEmployeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['startTime', getI64Decoder()],
    ['endTime', getI64Decoder()],
    ['cliffTime', getI64Decoder()],
    ['totalAmount', getU64Decoder()],
  ]);
}

export function getCreateEmployeeInstructionDataCodec(): FixedSizeCodec<
  CreateEmployeeInstructionDataArgs,
  CreateEmployeeInstructionData
> {
  return combineCodec(
    getCreateEmployeeInstructionDataEncoder(),
    getCreateEmployeeInstructionDataDecoder()
  );
}

export type CreateEmployeeAsyncInput<
  TAccountOwner extends string = string,
  TAccountBeneficiary extends string = string,
  TAccountVesting extends string = string,
  TAccountEmployee extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  beneficiary: Address<TAccountBeneficiary>;
  vesting: Address<TAccountVesting>;
  employee?: Address<TAccountEmployee>;
  systemProgram?: Address<TAccountSystemProgram>;
  startTime: CreateEmployeeInstructionDataArgs['startTime'];
  endTime: CreateEmployeeInstructionDataArgs['endTime'];
  cliffTime: CreateEmployeeInstructionDataArgs['cliffTime'];
  totalAmount: CreateEmployeeInstructionDataArgs['totalAmount'];
};

export async function getCreateEmployeeInstructionAsync<
  TAccountOwner extends string,
  TAccountBeneficiary extends string,
  TAccountVesting extends string,
  TAccountEmployee extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VESTING_PROGRAM_ADDRESS,
>(
  input: CreateEmployeeAsyncInput<
    TAccountOwner,
    TAccountBeneficiary,
    TAccountVesting,
    TAccountEmployee,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateEmployeeInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountBeneficiary,
    TAccountVesting,
    TAccountEmployee,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? VESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    beneficiary: { value: input.beneficiary ?? null, isWritable: false },
    vesting: { value: input.vesting ?? null, isWritable: false },
    employee: { value: input.employee ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.employee.value) {
    accounts.employee.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            101, 109, 112, 108, 111, 121, 101, 101, 95, 118, 101, 115, 116, 105,
            110, 103,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.beneficiary.value)),
        getAddressEncoder().encode(expectAddress(accounts.vesting.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.beneficiary),
      getAccountMeta(accounts.vesting),
      getAccountMeta(accounts.employee),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateEmployeeInstructionDataEncoder().encode(
      args as CreateEmployeeInstructionDataArgs
    ),
  } as CreateEmployeeInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountBeneficiary,
    TAccountVesting,
    TAccountEmployee,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateEmployeeInput<
  TAccountOwner extends string = string,
  TAccountBeneficiary extends string = string,
  TAccountVesting extends string = string,
  TAccountEmployee extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  beneficiary: Address<TAccountBeneficiary>;
  vesting: Address<TAccountVesting>;
  employee: Address<TAccountEmployee>;
  systemProgram?: Address<TAccountSystemProgram>;
  startTime: CreateEmployeeInstructionDataArgs['startTime'];
  endTime: CreateEmployeeInstructionDataArgs['endTime'];
  cliffTime: CreateEmployeeInstructionDataArgs['cliffTime'];
  totalAmount: CreateEmployeeInstructionDataArgs['totalAmount'];
};

export function getCreateEmployeeInstruction<
  TAccountOwner extends string,
  TAccountBeneficiary extends string,
  TAccountVesting extends string,
  TAccountEmployee extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VESTING_PROGRAM_ADDRESS,
>(
  input: CreateEmployeeInput<
    TAccountOwner,
    TAccountBeneficiary,
    TAccountVesting,
    TAccountEmployee,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateEmployeeInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountBeneficiary,
  TAccountVesting,
  TAccountEmployee,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? VESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    beneficiary: { value: input.beneficiary ?? null, isWritable: false },
    vesting: { value: input.vesting ?? null, isWritable: false },
    employee: { value: input.employee ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.beneficiary),
      getAccountMeta(accounts.vesting),
      getAccountMeta(accounts.employee),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateEmployeeInstructionDataEncoder().encode(
      args as CreateEmployeeInstructionDataArgs
    ),
  } as CreateEmployeeInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountBeneficiary,
    TAccountVesting,
    TAccountEmployee,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateEmployeeInstruction<
  TProgram extends string = typeof VESTING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    beneficiary: TAccountMetas[1];
    vesting: TAccountMetas[2];
    employee: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: CreateEmployeeInstructionData;
};

export function parseCreateEmployeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateEmployeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      beneficiary: getNextAccount(),
      vesting: getNextAccount(),
      employee: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateEmployeeInstructionDataDecoder().decode(instruction.data),
  };
}
