/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { VESTING_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_TOKENS_DISCRIMINATOR = new Uint8Array([
  108, 216, 210, 231, 0, 212, 42, 64,
]);

export function getClaimTokensDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_TOKENS_DISCRIMINATOR
  );
}

export type ClaimTokensInstruction<
  TProgram extends string = typeof VESTING_PROGRAM_ADDRESS,
  TAccountBeneficiary extends string | AccountMeta<string> = string,
  TAccountEmployee extends string | AccountMeta<string> = string,
  TAccountVesting extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountTreasuryTokenAccount extends string | AccountMeta<string> = string,
  TAccountEmployeeTokenAccount extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBeneficiary extends string
        ? WritableSignerAccount<TAccountBeneficiary> &
            AccountSignerMeta<TAccountBeneficiary>
        : TAccountBeneficiary,
      TAccountEmployee extends string
        ? WritableAccount<TAccountEmployee>
        : TAccountEmployee,
      TAccountVesting extends string
        ? WritableAccount<TAccountVesting>
        : TAccountVesting,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountTreasuryTokenAccount extends string
        ? WritableAccount<TAccountTreasuryTokenAccount>
        : TAccountTreasuryTokenAccount,
      TAccountEmployeeTokenAccount extends string
        ? WritableAccount<TAccountEmployeeTokenAccount>
        : TAccountEmployeeTokenAccount,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimTokensInstructionData = {
  discriminator: ReadonlyUint8Array;
  companyName: string;
};

export type ClaimTokensInstructionDataArgs = { companyName: string };

export function getClaimTokensInstructionDataEncoder(): Encoder<ClaimTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['companyName', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_TOKENS_DISCRIMINATOR })
  );
}

export function getClaimTokensInstructionDataDecoder(): Decoder<ClaimTokensInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['companyName', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getClaimTokensInstructionDataCodec(): Codec<
  ClaimTokensInstructionDataArgs,
  ClaimTokensInstructionData
> {
  return combineCodec(
    getClaimTokensInstructionDataEncoder(),
    getClaimTokensInstructionDataDecoder()
  );
}

export type ClaimTokensAsyncInput<
  TAccountBeneficiary extends string = string,
  TAccountEmployee extends string = string,
  TAccountVesting extends string = string,
  TAccountMint extends string = string,
  TAccountTreasuryTokenAccount extends string = string,
  TAccountEmployeeTokenAccount extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  beneficiary: TransactionSigner<TAccountBeneficiary>;
  employee?: Address<TAccountEmployee>;
  vesting?: Address<TAccountVesting>;
  mint: Address<TAccountMint>;
  treasuryTokenAccount: Address<TAccountTreasuryTokenAccount>;
  employeeTokenAccount?: Address<TAccountEmployeeTokenAccount>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  companyName: ClaimTokensInstructionDataArgs['companyName'];
};

export async function getClaimTokensInstructionAsync<
  TAccountBeneficiary extends string,
  TAccountEmployee extends string,
  TAccountVesting extends string,
  TAccountMint extends string,
  TAccountTreasuryTokenAccount extends string,
  TAccountEmployeeTokenAccount extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VESTING_PROGRAM_ADDRESS,
>(
  input: ClaimTokensAsyncInput<
    TAccountBeneficiary,
    TAccountEmployee,
    TAccountVesting,
    TAccountMint,
    TAccountTreasuryTokenAccount,
    TAccountEmployeeTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimTokensInstruction<
    TProgramAddress,
    TAccountBeneficiary,
    TAccountEmployee,
    TAccountVesting,
    TAccountMint,
    TAccountTreasuryTokenAccount,
    TAccountEmployeeTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? VESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    beneficiary: { value: input.beneficiary ?? null, isWritable: true },
    employee: { value: input.employee ?? null, isWritable: true },
    vesting: { value: input.vesting ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    treasuryTokenAccount: {
      value: input.treasuryTokenAccount ?? null,
      isWritable: true,
    },
    employeeTokenAccount: {
      value: input.employeeTokenAccount ?? null,
      isWritable: true,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.vesting.value) {
    accounts.vesting.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([118, 101, 115, 116, 105, 110, 103])
        ),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.companyName)
        ),
      ],
    });
  }
  if (!accounts.employee.value) {
    accounts.employee.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            101, 109, 112, 108, 111, 121, 101, 101, 95, 118, 101, 115, 116, 105,
            110, 103,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.beneficiary.value)),
        getAddressEncoder().encode(expectAddress(accounts.vesting.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.employeeTokenAccount.value) {
    accounts.employeeTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.beneficiary.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.beneficiary),
      getAccountMeta(accounts.employee),
      getAccountMeta(accounts.vesting),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.treasuryTokenAccount),
      getAccountMeta(accounts.employeeTokenAccount),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimTokensInstructionDataEncoder().encode(
      args as ClaimTokensInstructionDataArgs
    ),
  } as ClaimTokensInstruction<
    TProgramAddress,
    TAccountBeneficiary,
    TAccountEmployee,
    TAccountVesting,
    TAccountMint,
    TAccountTreasuryTokenAccount,
    TAccountEmployeeTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ClaimTokensInput<
  TAccountBeneficiary extends string = string,
  TAccountEmployee extends string = string,
  TAccountVesting extends string = string,
  TAccountMint extends string = string,
  TAccountTreasuryTokenAccount extends string = string,
  TAccountEmployeeTokenAccount extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  beneficiary: TransactionSigner<TAccountBeneficiary>;
  employee: Address<TAccountEmployee>;
  vesting: Address<TAccountVesting>;
  mint: Address<TAccountMint>;
  treasuryTokenAccount: Address<TAccountTreasuryTokenAccount>;
  employeeTokenAccount: Address<TAccountEmployeeTokenAccount>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  companyName: ClaimTokensInstructionDataArgs['companyName'];
};

export function getClaimTokensInstruction<
  TAccountBeneficiary extends string,
  TAccountEmployee extends string,
  TAccountVesting extends string,
  TAccountMint extends string,
  TAccountTreasuryTokenAccount extends string,
  TAccountEmployeeTokenAccount extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VESTING_PROGRAM_ADDRESS,
>(
  input: ClaimTokensInput<
    TAccountBeneficiary,
    TAccountEmployee,
    TAccountVesting,
    TAccountMint,
    TAccountTreasuryTokenAccount,
    TAccountEmployeeTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimTokensInstruction<
  TProgramAddress,
  TAccountBeneficiary,
  TAccountEmployee,
  TAccountVesting,
  TAccountMint,
  TAccountTreasuryTokenAccount,
  TAccountEmployeeTokenAccount,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? VESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    beneficiary: { value: input.beneficiary ?? null, isWritable: true },
    employee: { value: input.employee ?? null, isWritable: true },
    vesting: { value: input.vesting ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    treasuryTokenAccount: {
      value: input.treasuryTokenAccount ?? null,
      isWritable: true,
    },
    employeeTokenAccount: {
      value: input.employeeTokenAccount ?? null,
      isWritable: true,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.beneficiary),
      getAccountMeta(accounts.employee),
      getAccountMeta(accounts.vesting),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.treasuryTokenAccount),
      getAccountMeta(accounts.employeeTokenAccount),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimTokensInstructionDataEncoder().encode(
      args as ClaimTokensInstructionDataArgs
    ),
  } as ClaimTokensInstruction<
    TProgramAddress,
    TAccountBeneficiary,
    TAccountEmployee,
    TAccountVesting,
    TAccountMint,
    TAccountTreasuryTokenAccount,
    TAccountEmployeeTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedClaimTokensInstruction<
  TProgram extends string = typeof VESTING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    beneficiary: TAccountMetas[0];
    employee: TAccountMetas[1];
    vesting: TAccountMetas[2];
    mint: TAccountMetas[3];
    treasuryTokenAccount: TAccountMetas[4];
    employeeTokenAccount: TAccountMetas[5];
    associatedTokenProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: ClaimTokensInstructionData;
};

export function parseClaimTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      beneficiary: getNextAccount(),
      employee: getNextAccount(),
      vesting: getNextAccount(),
      mint: getNextAccount(),
      treasuryTokenAccount: getNextAccount(),
      employeeTokenAccount: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getClaimTokensInstructionDataDecoder().decode(instruction.data),
  };
}
