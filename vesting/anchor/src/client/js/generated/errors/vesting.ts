/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { VESTING_PROGRAM_ADDRESS } from '../programs';

/** ClaimNotAvailableYet: Claim not available yet as time not passed */
export const VESTING_ERROR__CLAIM_NOT_AVAILABLE_YET = 0x1770; // 6000
/** InvalidVestingPeriod: Invalid vesting period */
export const VESTING_ERROR__INVALID_VESTING_PERIOD = 0x1771; // 6001
/** CalculationOverflow: Calculation overdlow */
export const VESTING_ERROR__CALCULATION_OVERFLOW = 0x1772; // 6002
/** NothingToClaim: Nothing to claim */
export const VESTING_ERROR__NOTHING_TO_CLAIM = 0x1773; // 6003

export type VestingError =
  | typeof VESTING_ERROR__CALCULATION_OVERFLOW
  | typeof VESTING_ERROR__CLAIM_NOT_AVAILABLE_YET
  | typeof VESTING_ERROR__INVALID_VESTING_PERIOD
  | typeof VESTING_ERROR__NOTHING_TO_CLAIM;

let vestingErrorMessages: Record<VestingError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  vestingErrorMessages = {
    [VESTING_ERROR__CALCULATION_OVERFLOW]: `Calculation overdlow`,
    [VESTING_ERROR__CLAIM_NOT_AVAILABLE_YET]: `Claim not available yet as time not passed`,
    [VESTING_ERROR__INVALID_VESTING_PERIOD]: `Invalid vesting period`,
    [VESTING_ERROR__NOTHING_TO_CLAIM]: `Nothing to claim`,
  };
}

export function getVestingErrorMessage(code: VestingError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (vestingErrorMessages as Record<VestingError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isVestingError<TProgramErrorCode extends VestingError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    VESTING_PROGRAM_ADDRESS,
    code
  );
}
